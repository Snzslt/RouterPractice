{"ast":null,"code":"var _jsxFileName = \"/Users/sunaz/Desktop/12-adv-starting-project/frontend/src/pages/EventsPage.js\",\n  _s = $RefreshSig$();\nimport { json } from \"react-router-dom\";\nimport { useLoaderData } from \"react-router-dom\";\nimport EventsList from \"../components/EventsList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const data = useLoaderData();\n  //   if (data.isError) {\n  //     return <p>{data.message}</p>;\n  //   }\n  const events = data.events;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(EventsList, {\n      events: events\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(EventsPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nexport async function loader() {\n  //we can not use react hooks in loaders\n  const response = await fetch(\"http://localhost:8080/events\");\n  if (!response.ok) {\n    //setError(\"Fetching events failed.\");\n    //return { isError: true, message: \"Could not fetch events.\" };\n    //throw  { message: 'Could not fetch events'};\n    //throw new Response(JSON. stringify({message: 'Could not fetch events.'}),\n    //{\n    //status: 500,\n    //});\n    return json({\n      message: 'Could not fetch events.'\n    });\n  } else {\n    const resData = await response.json();\n    return resData.events;\n    //return resposne;\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["json","useLoaderData","EventsList","jsxDEV","_jsxDEV","Fragment","_Fragment","EventsPage","_s","data","events","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","loader","response","fetch","ok","message","resData","$RefreshReg$"],"sources":["/Users/sunaz/Desktop/12-adv-starting-project/frontend/src/pages/EventsPage.js"],"sourcesContent":["import { json } from \"react-router-dom\";\nimport { useLoaderData } from \"react-router-dom\";\n\nimport EventsList from \"../components/EventsList\";\n\nfunction EventsPage() {\n  const data = useLoaderData();\n//   if (data.isError) {\n//     return <p>{data.message}</p>;\n//   }\n  const events = data.events;\n  return (\n    <>\n      <EventsList events={events} />\n    </>\n  );\n}\n\nexport default EventsPage;\nexport async function loader() {\n  //we can not use react hooks in loaders\n  const response = await fetch(\"http://localhost:8080/events\");\n\n  if (!response.ok) {\n    //setError(\"Fetching events failed.\");\n    //return { isError: true, message: \"Could not fetch events.\" };\n    //throw  { message: 'Could not fetch events'};\n    //throw new Response(JSON. stringify({message: 'Could not fetch events.'}),\n    //{\n        //status: 500,\n    //});\n    return json(\n        {message: 'Could not fetch events.'},\n        \n    )\n  } else {\n    const resData = await response.json();\n    return resData.events;\n    //return resposne;\n  }\n}\n"],"mappings":";;AAAA,SAASA,IAAI,QAAQ,kBAAkB;AACvC,SAASC,aAAa,QAAQ,kBAAkB;AAEhD,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAElD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAMC,IAAI,GAAGR,aAAa,CAAC,CAAC;EAC9B;EACA;EACA;EACE,MAAMS,MAAM,GAAGD,IAAI,CAACC,MAAM;EAC1B,oBACEN,OAAA,CAAAE,SAAA;IAAAK,QAAA,eACEP,OAAA,CAACF,UAAU;MAACQ,MAAM,EAAEA;IAAO;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC,gBAC9B,CAAC;AAEP;AAACP,EAAA,CAXQD,UAAU;EAAA,QACJN,aAAa;AAAA;AAAAe,EAAA,GADnBT,UAAU;AAanB,eAAeA,UAAU;AACzB,OAAO,eAAeU,MAAMA,CAAA,EAAG;EAC7B;EACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA;IACA;IACA;IACA;IACI;IACJ;IACA,OAAOpB,IAAI,CACP;MAACqB,OAAO,EAAE;IAAyB,CAEvC,CAAC;EACH,CAAC,MAAM;IACL,MAAMC,OAAO,GAAG,MAAMJ,QAAQ,CAAClB,IAAI,CAAC,CAAC;IACrC,OAAOsB,OAAO,CAACZ,MAAM;IACrB;EACF;AACF;AAAC,IAAAM,EAAA;AAAAO,YAAA,CAAAP,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}