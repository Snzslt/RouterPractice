{"ast":null,"code":"var _jsxFileName = \"/Users/sunaz/Desktop/12-adv-starting-project/frontend/src/pages/EventsPage.js\",\n  _s = $RefreshSig$();\nimport EventsList from \"../components/EventsList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const {\n    events\n  } = useLoaderData();\n  return /*#__PURE__*/_jsxDEV(Suspense, {\n    fallback: /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        textAlign: 'center'\n      },\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 26\n    }, this),\n    children: /*#__PURE__*/_jsxDEV(Await, {\n      resolve: events,\n      children: loadedEvents => /*#__PURE__*/_jsxDEV(EventsList, {\n        events: loadedEvents\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 6\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 6\n  }, this);\n  //const events = data.events;\n\n  //   if (data.isError) {\n  //     return <p>{data.message}</p>;\n  //   }\n  //\n  //return (\n  //  <>\n  //   <EventsList events={events} />\n  // </>\n  //);\n}\n_s(EventsPage, \"22Av1LduzrZxSsk8kXUUCix36lQ=\", true);\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvents() {\n  //we can not use react hooks in loaders\n  const response = await fetch(\"http://localhost:8080/events\");\n  if (!response.ok) {\n    //setError(\"Fetching events failed.\");\n    //return { isError: true, message: \"Could not fetch events.\" };\n    //throw  { message: 'Could not fetch events'};\n    //throw new Response(JSON. stringify({message: 'Could not fetch events.'}),\n    //{\n    //status: 500,\n    //});\n    return json({\n      message: 'Could not fetch events.'\n    }, {\n      status: 500\n    });\n  } else {\n    const resData = await response.json();\n    return resData.events;\n    //return resposne;\n  }\n}\nexport function loader() {\n  return defer({\n    events: loadEvents()\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["EventsList","jsxDEV","_jsxDEV","EventsPage","_s","events","useLoaderData","Suspense","fallback","style","textAlign","children","fileName","_jsxFileName","lineNumber","columnNumber","Await","resolve","loadedEvents","_c","loadEvents","response","fetch","ok","json","message","status","resData","loader","defer","$RefreshReg$"],"sources":["/Users/sunaz/Desktop/12-adv-starting-project/frontend/src/pages/EventsPage.js"],"sourcesContent":["\n\nimport EventsList from \"../components/EventsList\";\n\nfunction EventsPage() {\n  const {events} = useLoaderData();\n\n   return(\n     <Suspense fallback={<p style={{textAlign: 'center'}}>Loading...</p>}>\n     <Await resolve={events}>\n     {(loadedEvents) => <EventsList events={loadedEvents}/>}\n     </Await>\n     </Suspense>\n     )\n//const events = data.events;\n  \n//   if (data.isError) {\n//     return <p>{data.message}</p>;\n//   }\n//\n//return (\n//  <>\n//   <EventsList events={events} />\n// </>\n//);\n}\n\nexport default EventsPage;\n\nasync function loadEvents(){\n    //we can not use react hooks in loaders\n    const response = await fetch(\"http://localhost:8080/events\");\n\n    if (!response.ok) {\n      //setError(\"Fetching events failed.\");\n      //return { isError: true, message: \"Could not fetch events.\" };\n      //throw  { message: 'Could not fetch events'};\n      //throw new Response(JSON. stringify({message: 'Could not fetch events.'}),\n      //{\n          //status: 500,\n      //});\n      return json(\n          {message: 'Could not fetch events.'},\n          {\n              status:500,\n          }\n      );\n    } else {\n      const resData = await response.json();\n      return resData.events;\n      //return resposne;\n      \n    }\n}\nexport function loader() {\n return defer({\n   events: loadEvents()\n })\n}\n"],"mappings":";;AAEA,OAAOA,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM;IAACC;EAAM,CAAC,GAAGC,aAAa,CAAC,CAAC;EAE/B,oBACEJ,OAAA,CAACK,QAAQ;IAACC,QAAQ,eAAEN,OAAA;MAAGO,KAAK,EAAE;QAACC,SAAS,EAAE;MAAQ,CAAE;MAAAC,QAAA,EAAC;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAE;IAAAJ,QAAA,eACpET,OAAA,CAACc,KAAK;MAACC,OAAO,EAAEZ,MAAO;MAAAM,QAAA,EACrBO,YAAY,iBAAKhB,OAAA,CAACF,UAAU;QAACK,MAAM,EAAEa;MAAa;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/C;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;EAEhB;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACA;AAACX,EAAA,CArBQD,UAAU;AAAAgB,EAAA,GAAVhB,UAAU;AAuBnB,eAAeA,UAAU;AAEzB,eAAeiB,UAAUA,CAAA,EAAE;EACvB;EACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA;IACA;IACA;IACA;IACI;IACJ;IACA,OAAOC,IAAI,CACP;MAACC,OAAO,EAAE;IAAyB,CAAC,EACpC;MACIC,MAAM,EAAC;IACX,CACJ,CAAC;EACH,CAAC,MAAM;IACL,MAAMC,OAAO,GAAG,MAAMN,QAAQ,CAACG,IAAI,CAAC,CAAC;IACrC,OAAOG,OAAO,CAACtB,MAAM;IACrB;EAEF;AACJ;AACA,OAAO,SAASuB,MAAMA,CAAA,EAAG;EACxB,OAAOC,KAAK,CAAC;IACXxB,MAAM,EAAEe,UAAU,CAAC;EACrB,CAAC,CAAC;AACH;AAAC,IAAAD,EAAA;AAAAW,YAAA,CAAAX,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}